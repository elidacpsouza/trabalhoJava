package modelos;


import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.LayoutManager;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;
import javax.swing.JToggleButton;
import utilitario.JBlocoContainer2;

/**
 *
 * @author 
 */
public class JCTaskPane extends JPanel {

    private static long tempoExec = 0;
    public boolean topoScroll = true;
    public int posicaoScrooll = 0;
    private boolean expanded = false;
    private int alturaPadrao = 0;
    public JToggleButton jcbTitulo;
    public JLabel jclIconeDireiro;
    public JLabel jclIconeEsquerdo;
    public JPanel jcpCentral;
    public JCTaskPane() {
        initComponents();
        setMinimumSize(new Dimension(10, 10));
        getJcpCentral().setLayout(new javax.swing.SpringLayout());
        alturaPadrao = this.getPreferredSize().height;
        jcbTitulo.setLayout(new BorderLayout());
        jcbTitulo.add(jclIconeDireiro, BorderLayout.EAST);
        jcbTitulo.add(jclIconeEsquerdo, BorderLayout.WEST);
        jclIconeEsquerdo.setText("Bloco de Informações");
        setExpanded(false);
    }

    public JCTaskPane(String titulo) {
        this();
        setTitle(titulo);
    }

    public JCTaskPane(String titulo, int posicao) {
        this(titulo);
        posicaoScrooll = posicao;
    }

    public boolean isExpanded() {
        return expanded;
    }

    public void setExpanded(boolean expanded) {
        this.expanded = expanded;
        if (expanded) {
            setImageIconDireito("/image/recolher.png");
            super.setPreferredSize(new Dimension(getPreferredSize().width, alturaPadrao));
            getJcpCentral().setVisible(true);
            expanded = true;
        } else {
            setImageIconDireito("/image/expandir.png");
            super.setPreferredSize(new Dimension(getPreferredSize().width, jcbTitulo.getPreferredSize().height + 4));
            getJcpCentral().setVisible(false);
            expanded = false;
        }
        getJcbTitulo().setSelected(expanded);
    }

    public int getAlturaPadrao() {
        return alturaPadrao;
    }

    public void setAlturaPadrao(int alturaPadrao) {
        this.alturaPadrao = alturaPadrao;
    }

    public JToggleButton getJcbTitulo() {
        return jcbTitulo;
    }

    public void setJcbTitulo(JToggleButton jcbTitulo) {
        this.jcbTitulo = jcbTitulo;
    }

    public JLabel getJclIconeDireiro() {
        return jclIconeDireiro;
    }

    public void setJclIconeDireiro(JLabel jclIconeDireiro) {
        this.jclIconeDireiro = jclIconeDireiro;
    }

    public JLabel getJclIconeEsquerdo() {
        return jclIconeEsquerdo;
    }

    public void setJclIconeEsquerdo(JLabel jclIconeEsquerdo) {
        this.jclIconeEsquerdo = jclIconeEsquerdo;
    }

    public JPanel getJcpCentral() {
        if (this.jcpCentral == null) {
            jcpCentral = new JPanel();
        }
        return this.jcpCentral;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">
    private void initComponents() {
        super.setLayout(new java.awt.BorderLayout());

        jclIconeDireiro = new JLabel();
        jclIconeEsquerdo = new JLabel();
        jcpCentral = new JPanel();
        jcbTitulo = new JToggleButton();

        jclIconeDireiro.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 4));
        jclIconeDireiro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/expandir.png"))); // NOI18N
        jclIconeDireiro.addMouseListener(new java.awt.event.MouseAdapter() {

            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jclIconeDireiroMouseClicked(evt);
            }
        });

        jclIconeEsquerdo.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 4));
        jclIconeEsquerdo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/controlSearchWizard.png"))); // NOI18N
        jclIconeEsquerdo.addMouseListener(new java.awt.event.MouseAdapter() {

            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jclIconeEsquerdoMouseClicked(evt);
            }
        });

        setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jcpCentral.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 1, 1));

        add(jcpCentral, java.awt.BorderLayout.CENTER);

        jcbTitulo.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 2, 1, 1));
        jcbTitulo.setPreferredSize(new java.awt.Dimension(117, 25));
        jcbTitulo.addFocusListener(new java.awt.event.FocusAdapter() {

            public void focusGained(java.awt.event.FocusEvent evt) {
            }
        });

        add(jcbTitulo, java.awt.BorderLayout.PAGE_START);
    } // </editor-fold>

    
    private void jclIconeEsquerdoMouseClicked(java.awt.event.MouseEvent e) {
        getJcbTitulo().requestFocus();
                desativaOutrosTasksLivre();
    }

    private void jclIconeDireiroMouseClicked(java.awt.event.MouseEvent e) {
                desativaOutrosTasksLivre();

    }

    public void setImageIconEsquerdo(String image) {
        jclIconeEsquerdo.setIcon(new javax.swing.ImageIcon(getClass().getResource(image)));
    }

    public void setImageIconDireito(String image) {
        jclIconeDireiro.setIcon(new javax.swing.ImageIcon(getClass().getResource(image)));
    }

    public void setTitle(String titulo) {
        jclIconeEsquerdo.setText(titulo);
    }

    public String getTitle() {
        return jclIconeEsquerdo.getText();
    }

    @Override
    public void setPreferredSize(Dimension preferredSize) {
        if (isExpanded()) {
            super.setPreferredSize(preferredSize);
        }
        setAlturaPadrao(preferredSize.height);
    }

    @Override
    public void requestFocus() {
        getJcbTitulo().requestFocus();
    }

    public Component add(Component comp) {
        getJcPanel().add(comp);
        return comp;
    }

    public Component add(Component comp, int index) {
        getJcPanel().add(comp, index);
        return comp;
    }

    public JPanel getJcPanel() {
        return getJcpCentral();
    }

    @Override
    public void setLayout(LayoutManager mgr) {
        getJcPanel().setLayout(mgr);
    }

    public void desativaOutrosTasksLivre() {
        if (getParent() instanceof JBlocoContainer2) {
            if (!((JBlocoContainer2) getParent()).isBlocoLivres()) {
                for (int i = 0; i < getParent().getComponentCount(); i++) {
                    if (!getParent().getComponent(i).equals(this)) {
                        ((JCTaskPane) getParent().getComponent(i)).setExpanded(false);
                    } else {
                        if (!isExpanded()) {
                            setExpanded(true);
                        }
                    }
                }
            } else {
                if (!isExpanded()) {
                    setExpanded(true);
                } else {
                    setExpanded(false);
                }
            }
            JScrollBar vertical = ((JScrollPane) getParent().getParent().getParent()).getVerticalScrollBar();
                if (posicaoScrooll > 400) {
                    vertical.getParent().validate(); //ATUALIZA O SCROOLPANE
                    vertical.setMaximum(vertical.getMaximum() + 70);
                    vertical.setValue(vertical.getMaximum());
                } else {
                    vertical.getParent().validate(); //ATUALIZA O SCROOLPANE
                    vertical.setValue(posicaoScrooll);
                }
            vertical.getParent().repaint();
        }
    }

}
