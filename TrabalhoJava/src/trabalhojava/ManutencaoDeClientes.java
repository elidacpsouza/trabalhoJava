/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package trabalhojava;

import cadastros.CadastroCliente;
import dao.ClienteDao;
import entidades.Cliente;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import modelos.ModeloTabelaClientes;

/**
 *
 * @author Elida
 */
public class ManutencaoDeClientes extends javax.swing.JDialog {

    /**
     * Creates new form ManutencaoDeClientes
     */
    private ModeloTabelaClientes modeloTabela;
    private int linhaClicada = -1;
    boolean modoVenda = false;
    Cliente clienteSelecionado = null;

    public ManutencaoDeClientes(java.awt.Frame parent, boolean modal, boolean modoVenda) {
        setModal(true);
        modeloTabela = new ModeloTabelaClientes();
        this.modoVenda = modoVenda;
        initComponents();
        initTable();
        iniciaBotoes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnListar = new javax.swing.JButton();
        btnListarTodos = new javax.swing.JButton();
        btnInsert = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jtfFiltro = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Manutenção de Clientes");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocation(new java.awt.Point(0, 0));
        setLocationByPlatform(true);
        setModal(true);
        setResizable(false);
        setSize(new java.awt.Dimension(600, 500));
        setType(java.awt.Window.Type.POPUP);

        jPanel1.setOpaque(false);
        jPanel1.setPreferredSize(new java.awt.Dimension(156, 32));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 2));

        btnListar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagem/icones/Next.png"))); // NOI18N
        btnListar.setToolTipText("Filtrar");
        btnListar.setMaximumSize(new java.awt.Dimension(30, 30));
        btnListar.setMinimumSize(new java.awt.Dimension(30, 30));
        btnListar.setPreferredSize(new java.awt.Dimension(30, 30));
        btnListar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarActionPerformed(evt);
            }
        });
        jPanel1.add(btnListar);

        btnListarTodos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagem/icones/controlNavigatorNext.png"))); // NOI18N
        btnListarTodos.setToolTipText("Listar Todos");
        btnListarTodos.setMaximumSize(new java.awt.Dimension(30, 30));
        btnListarTodos.setMinimumSize(new java.awt.Dimension(30, 30));
        btnListarTodos.setPreferredSize(new java.awt.Dimension(30, 30));
        btnListarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarTodosActionPerformed(evt);
            }
        });
        jPanel1.add(btnListarTodos);

        btnInsert.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagem/icones/controlEditInsert.png"))); // NOI18N
        btnInsert.setToolTipText("Novo");
        btnInsert.setMaximumSize(new java.awt.Dimension(30, 30));
        btnInsert.setMinimumSize(new java.awt.Dimension(30, 30));
        btnInsert.setPreferredSize(new java.awt.Dimension(30, 30));
        btnInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertActionPerformed(evt);
            }
        });
        jPanel1.add(btnInsert);

        btnEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagem/icones/controlEditEdit.png"))); // NOI18N
        btnEdit.setToolTipText("Editar");
        btnEdit.setMaximumSize(new java.awt.Dimension(30, 30));
        btnEdit.setMinimumSize(new java.awt.Dimension(30, 30));
        btnEdit.setPreferredSize(new java.awt.Dimension(30, 30));
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });
        jPanel1.add(btnEdit);

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagem/icones/controlEditDelete.png"))); // NOI18N
        btnDelete.setToolTipText("Excluir");
        btnDelete.setMaximumSize(new java.awt.Dimension(30, 30));
        btnDelete.setMinimumSize(new java.awt.Dimension(30, 30));
        btnDelete.setPreferredSize(new java.awt.Dimension(30, 30));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        jPanel1.add(btnDelete);

        jTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                    {null, null, null, null},
                    {null, null, null, null},
                    {null, null, null, null},
                    {null, null, null, null}
                },
                new String[]{
                    "Title 1", "Title 2", "Title 3", "Title 4"
                }
        ));
        jTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel1.setText("FILTRO:");

        jtfFiltro.setToolTipText("Busca por ID, Nome, Sobrenome ou CPF");
        jtfFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfFiltroActionPerformed(evt);
            }
        });
        jtfFiltro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtfFiltroKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfFiltro)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 597, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jtfFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 411, Short.MAX_VALUE)
                        .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void iniciaBotoes() {
        if (modoVenda) {
            btnDelete.setEnabled(false);
            btnEdit.setEnabled(false);
        } else {
            btnDelete.setEnabled(true);
            btnEdit.setEnabled(true);
        }
    }
    
    private void initTable() {
        jTable.setModel(modeloTabela);
        jTable.getColumn("ID").setMaxWidth(40);
        jTable.getColumn("NOME").setMinWidth(100);
        jTable.getColumn("SOBRENOME").setMinWidth(100);
        atualizaTabela();
        jTable.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER && modoVenda) {
                    if (jTable.getSelectedRowCount() == 1 && linhaClicada > -1) {
                        clienteSelecionado = modeloTabela.getCliente(linhaClicada);
                        dispose();
                    }

                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER && modoVenda) {
                    if (jTable.getSelectedRowCount() == 1 && linhaClicada > -1) {
                        clienteSelecionado = modeloTabela.getCliente(linhaClicada);
                        dispose();
                    }

                }
            }

            @Override
            public void keyReleased(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER && modoVenda) {
                    if (jTable.getSelectedRowCount() == 1 && linhaClicada > -1) {
                        clienteSelecionado = modeloTabela.getCliente(linhaClicada);
                        dispose();
                    }

                }
            }
        });
    }

    private void jtfFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfFiltroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtfFiltroActionPerformed

    private void btnListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarActionPerformed
        filtrarClientes();
    }//GEN-LAST:event_btnListarActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        int[] linhasSelecionadas = jTable.getSelectedRows();
        if (linhasSelecionadas.length > 1) {
            JOptionPane.showMessageDialog(this, "Selecione somente um cliente para editar!", "Erro", JOptionPane.ERROR_MESSAGE);
        } else if (linhasSelecionadas.length < 1) {
            JOptionPane.showMessageDialog(this, "Selecione um cliente para editar!", "Erro", JOptionPane.ERROR_MESSAGE);
        } else {
            Cliente cliente = modeloTabela.getCliente(linhasSelecionadas[0]);
            CadastroCliente cad = new CadastroCliente(this, true, false, cliente);
            cad.setVisible(true);
            jtfFiltro.setText("");
            atualizaTabela();
        }

    }//GEN-LAST:event_btnEditActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // Deletar cliente selecionado
        if (linhaClicada > -1) {
            try {
                ClienteDao dao = new ClienteDao();
                int[] linhasSelecionadas = jTable.getSelectedRows();
                List<Cliente> listaExcluir = new ArrayList();
                List<String> clientesComPedido = new ArrayList<>();
                for (int i = 0; i < linhasSelecionadas.length; i++) {
                    Cliente cliente = modeloTabela.getCliente(linhasSelecionadas[i]);
                    if (dao.clienteTemPedido(cliente.getId())) {
                        dao.excluir(cliente);
                        listaExcluir.add(cliente);
                    } else {
                        clientesComPedido.add(cliente.getNome());
                    }

                }
                for (Cliente contato : listaExcluir) {
                    modeloTabela.removeCliente(contato);
                }
                if (clientesComPedido.size() > 0) {
                    String mensagemRetorno = null;
                    for (int i = 0; i < clientesComPedido.size(); i++) {
                        String clienteNaoExcluido = clientesComPedido.get(i);
                        if (i != clientesComPedido.size() - 1) {
                            mensagemRetorno += clienteNaoExcluido + " ,";
                        } else {
                            mensagemRetorno += clienteNaoExcluido + ".";
                        }
                    }
                    JOptionPane.showMessageDialog(this, "Erro ao realizar exclusão de contatos: " + mensagemRetorno, "Erro", JOptionPane.ERROR_MESSAGE);
                }
                jtfFiltro.setText("");
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Erro ao realizar exclusão de contatos.", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecione ao menos um cliente para excluir.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void jTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableMouseClicked
        //Pega a linha clicada
        linhaClicada = jTable.rowAtPoint(evt.getPoint());
        //Pega o contato da linha clidada
        Cliente cliente = modeloTabela.getCliente(linhaClicada);
        //Seta os dados nos componentes
        jtfFiltro.setText(cliente.getNome());
    }//GEN-LAST:event_jTableMouseClicked

    private void btnInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertActionPerformed
        CadastroCliente cad = new CadastroCliente(this, true, true, null);
        cad.setVisible(true);
        jtfFiltro.setText("");
        atualizaTabela();
    }//GEN-LAST:event_btnInsertActionPerformed

    private void btnListarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarTodosActionPerformed
        jtfFiltro.setText("");
        atualizaTabela();
    }//GEN-LAST:event_btnListarTodosActionPerformed

    private void jtfFiltroKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfFiltroKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            filtrarClientes();
        }
    }//GEN-LAST:event_jtfFiltroKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManutencaoDeClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManutencaoDeClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManutencaoDeClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManutencaoDeClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ManutencaoDeClientes dialog = new ManutencaoDeClientes(new javax.swing.JFrame(), true, true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnInsert;
    private javax.swing.JButton btnListar;
    private javax.swing.JButton btnListarTodos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable;
    private javax.swing.JTextField jtfFiltro;
    // End of variables declaration//GEN-END:variables

    private void atualizaTabela() {
        try {
            ClienteDao dao = new ClienteDao();
            List<Cliente> lista = dao.getLista();
            modeloTabela.setListaClientes(lista);
            btnListar.setSelected(false);
            linhaClicada = -1;
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Erro ao conectar com o banco de dados.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void filtrarClientes() {
        try {
            ClienteDao dao = new ClienteDao();
            List<Cliente> lista = dao.getLista(jtfFiltro.getText());
            modeloTabela.setListaClientes(lista);
            btnListar.setSelected(false);
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao conectar com o banco de dados.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    public Cliente getClienteSelecionado() {
        return clienteSelecionado;
    }

}
